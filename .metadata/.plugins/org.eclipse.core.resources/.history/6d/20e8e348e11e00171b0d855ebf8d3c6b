import java.util.*;

public class Components {
	
	public static List<ListNode> getAllComponent(ListNode ga, ListNode gb)
	{
		List<ListNode> components = new ArrayList<ListNode>();
		
		ListNode head_a = ga;
		ListNode head_b = gb;
		while(!allVisited(head_a))
		{
			int start = getSearchValue(head_a);
			System.out.println(start);
			ListNode ptr = head_a;
			if (head_a.visited == 3)
			{
				if(head_a.next != null) 
				{
					head_a.next.prev = null;
					head_a = head_a.next;
				}
				else
				{
					head_a = null;
				}
			}
			
			ListNode ptr_head = ptr;
			int original_start = start;
			while(true)
			{
				ListNode gb_return = getNextNode(head_b, start);
				System.out.println("gb_return: " + gb_return.first +"," +gb_return.second);
				if (gb_return.prev == null) 
				{
					head_b = gb_return.next;
					if (head_b != null)
					{
						head_b.prev = null;
					}
				}
				else
				{
					gb_return.prev.next = gb_return.next;
					if (gb_return.next != null)
					{
						gb_return.next.prev = gb_return.prev;
					}
				}
				
			
				
				ptr.next = gb_return;
				gb_return.prev = ptr;
				ptr = ptr.next;
				start = ptr.first == start ? ptr.second : ptr.first;
				if (start == 0)
				{
					ptr.next = null;
					components.add(ptr_head);
					System.out.println("AB path");
					break;
				}
				System.out.println("start: " + start);
				PreProcessData.printLinkedListWithLabel(head_a);
				ListNode ga_return = getNextNode(head_a, start);
				System.out.println("ga_return: " + ga_return.first +"," +ga_return.second);
				try {
				    Thread.sleep(10000);                 //1000 milliseconds is one second.
				} catch(InterruptedException ex) {
				    Thread.currentThread().interrupt();
				}
				resetVisitedValue(ga_return, start);
				if (ga_return.visited == 3)
				{
					if (ga_return.prev == null)
					{
						head_a = ga_return.next;
						if (head_a != null)
						{
							head_a.prev = null;
						}
					}
					else
					{
						ga_return.prev.next = ga_return.next;
						if (ga_return.next != null)
						{
							ga_return.next.prev = ga_return.prev;
						}
					}
				}
				
				ptr.next = ga_return;
				ga_return.prev = ptr;
				ptr = ptr.next;
				start = ptr.first == start ? ptr.second : ptr.first;
				if (start == 0)
				{
					ptr.next = null;
					components.add(ptr_head);
					System.out.println("AA path");
					break;
				}
				else if (start == original_start)
				{
					components.add(ptr_head);
					System.out.println("CIRCILE");
					break;
				}
			}
		}
		
		return components;
	}
	
	public static ListNode getNextNode(ListNode list, int val)
	{
		int index = getIndex(list, val);
		if (index == -1)
		{
			System.out.println("didn't find the node, Exception!");
			System.exit(0);
		}
		ListNode head = list;
		while(index>0)
		{
			head = head.next;
			index--;
		}
		
		return head;
	}
	
	public static int getIndex(ListNode list, int val)
	{
		if (list == null) return -1;
		
		int index = 0;
		
		ListNode head = list;
		
		while(head != null)
		{
			if (head.first == val || head.second == val)
			{
				return index;
			}
			index++;
			head = head.next;
		}
		
		return -1;
	}
	
	public static int getSearchValue(ListNode head)
	{
		ListNode ptr = head;
		
		while(ptr != null)
		{
			if (ptr.visited == 3) 
			{
				ptr = ptr.next;
			}
			if(!(ptr.first == 0 && ptr.second == 0))
			{
				if (ptr.first == 0)
				{
					ptr.visited = 3;
					return ptr.second;
				}
				else if (ptr.second == 0)
				{
					ptr.visited = 3;
					return ptr.first;
				}
				else
				{
					if (ptr.visited == 0)
					{
						ptr.visited = 1;
						return ptr.first;
					}
					else if (ptr.visited == 1)
					{
						ptr.visited = 3;
						return ptr.second;
					}
					else if (ptr.visited == 2)
					{
						ptr.visited = 3;
						return ptr.first;
					}
				}
			}
		}
		
		if (list.first == 0)
		{
			list.visited = 3;
			return list.second;
		}
		else if(list.second == 0)
		{
			list.visited = 3;
			return list.first;
		}
		else 
		{
			if (list.visited == 0)
			{
				list.visited = 1;
				return list.first;
			}
			else if (list.visited == 1)
			{
				list.visited = 3;
				return list.second;
			}
			else if (list.visited == 2)
			{
				list.visited = 3;
				return list.first;
			}
		}
		return -1;
	}
	
	public static void resetVisitedValue(ListNode node, int value)
	{
		if (node.visited == 0 && value == node.first)
		{
			node.visited = 1;
		}
		else if (node.visited == 0 && value == node.second)
		{
			node.visited = 2;
		}
		else if (node.visited == 1 && value == node.second)
		{
			node.visited = 3;
		}
		else if(node.visited == 2 && value == node.first)
		{
			node.visited = 3;
		}
	}
	
	public static ListNode retTail(ListNode head)
	{
		if (head == null || head.next == null) return head;
		
		ListNode ptr = head;
		
		while(ptr.next != null)
		{
			ptr = ptr.next;
		}
		
		return ptr;
	}
	
	public static boolean allVisited(ListNode head)
	{
		ListNode ptr = head;
		while(ptr != null)
		{
			if (!(head.first == 0 && head.second == 0))
			{
				if (head.visited != 3) return false;
			}
			head = head.next;
		}
		
		return true;
	}
}	
