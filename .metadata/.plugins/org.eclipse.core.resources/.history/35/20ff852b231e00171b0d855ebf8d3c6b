
public class Component {
	ListNode head;
	ListNode tail;
	public Component(ListNode head, ListNode tail)
	{
		this.head = head;
		this.tail = tail;
	}
	
	public Component[] getAllComponent(ListNode ga, ListNode gb)
	{
		ListNode head_a = ga;
		ListNode head_b = gb;
		
		while(head_a != null && !(head_a.first == 0 && head_a.second == 0))
		{
			int start = head_a.first == 0 ? head_a.second : head_a.first;
			ListNode ptr = head_a;
			if(head_a.next != null) 
			{
				head_a.next.prev = null;
				head_a.next = null;
			}
			int original_start = start;
			while(true)
			{
				ListNode gb_return = getNextNode(head_b, start);
				if (gb_return.prev == null) 
				{
					head_b = gb_return.next;
					if (head_b != null)
					{
						head_b.prev = null;
					}
				}
				else
				{
					gb_return.prev
				}
				
				ptr.next = gb_return;
				gb_return.prev = ptr;
				ptr = ptr.next;
				start = ptr.first == start ? ptr.second : ptr.first;
				if (start == 0)
				{
					System.out.println("AB path");
					break;
				}
			}
		}
		
	}
	
	public ListNode getNextNode(ListNode list, int val)
	{
		int index = getIndex(list, val);
		if (index == -1)
		{
			System.out.println("didn't find the node, Exception!");
			System.exit(0);
		}
		ListNode head = list;
		while(index>0)
		{
			head = head.next;
			index--;
		}
		
		return head;
	}
	
	public int getIndex(ListNode list, int val)
	{
		if (list == null) return -1;
		
		int index = 0;
		
		ListNode head = list;
		
		while(head != null)
		{
			if (head.first == val || head.second == val)
			{
				return index;
			}
			index++;
			head = head.next;
		}
		
		return -1;
	}
}	
